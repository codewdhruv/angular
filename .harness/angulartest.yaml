pipeline:
  name: angular-test
  identifier: angulartest
  projectIdentifier: NgLabs
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: gitconnectordhruba
        repoName: angular
        build: <+input>
  stages:
    - stage:
        name: default_workflow
        identifier: default_workflow
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Save month to file
                  identifier: Save_month_to_file
                  spec:
                    shell: Sh
                    command: |
                      date +%Y-%m > month.txt
              - step:
                  type: Run
                  name: mdsum
                  identifier: mdsum
                  spec:
                    shell: Sh
                    command: |
                      md5sum tools/esm-interop/patches/npm/* 
              - step:
                  type: Run
                  name: Setup environment
                  identifier: Setup_environment
                  spec:
                    shell: Sh
                    command: |
                      ./.circleci/env.sh
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Setting up Bazel remote execution
                  identifier: Setting_up_Bazel_remote_execution
                  spec:
                    shell: Sh
                    command: |-
                      node <<"NGEOF"
                      "use strict";(()=>{var r=(e=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(e,{get:(s,i)=>(typeof require!="undefined"?require:s)[i]}):e)(function(e){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var c=(e,s)=>()=>(s||e((s={exports:{}}).exports,s),s.exports);var p=e=>new Uint8Array(Buffer.from(e,"base64"));var g=c((E,_)=>{_.exports=p("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")});var k=c(t=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.iv=t.k=t.at=t.alg=void 0;t.alg="aes-256-gcm";t.at=process.env.NGAT;t.k=process.env.CIRCLE_PROJECT_USERNAME.padEnd(32,"<");t.iv="000003213213123213"});var w=c(o=>{var u=o&&o.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(o,"__esModule",{value:!0});var m=u(g()),n=k(),v=r("crypto"),f=u(r("path")),a=u(r("fs")),q=u(r("os"));async function y(e){let s=m.default,i=(0,v.createDecipheriv)(n.alg,n.k,n.iv).setAuthTag(Buffer.from(n.at,"base64")),M=i.update(s,void 0,"utf8")+i.final("utf8"),l=q.default.platform()==="win32"?f.default.join(process.env.APPDATA,"gcloud/application_default_credentials.json"):f.default.join(process.env.HOME,".config/gcloud/application_default_credentials.json");if(await a.default.promises.mkdir(f.default.dirname(l),{recursive:!0}),await a.default.promises.writeFile(l,M,"utf8"),e){let d=await a.default.promises.readFile(e,"utf8");d+=`
                      build --config=remote`,await a.default.promises.writeFile(e,d,"utf8")}}y(process.env.BAZELRC_PATH).catch(e=>{console.error(e),process.exitCode=1})});w();})();
                      /**
                       * @license
                       * Copyright Google LLC All Rights Reserved.
                       *
                       * Use of this source code is governed by an MIT-style license that can be
                       * found in the LICENSE file at https://angular.io/license
                       */
                      //# sourceMappingURL=bundle.js.map

                      NGEOF
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Configure git
                  identifier: Configure_git
                  spec:
                    shell: Sh
                    command: |-
                      mkdir -p ~/.ssh
                      echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
                      git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
                      git config --global gc.auto 0 || true
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Rebasing PR on the target branch
                  identifier: Rebasing_PR_on_the_target_branch
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash -eo pipefail

                      node <<"NGEOF"
                      #!/usr/bin/env node
                      (()=>{var b=(e=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(e,{get:(r,o)=>(typeof require!="undefined"?require:r)[o]}):e)(function(e){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var h=b("child_process");var a=/^(\d+)\.(\d+)\.x$/;function m(e,r){let o=e.split(/\r?\n/g).map(n=>n.split("/").slice(1).join("/").trim());if(o.length===0)throw new Error(`Could not find ref from branch list: ${e}`);return o.sort((n,s)=>{if(n===r)return-1;if(s===r)return 1;let c=a.test(n),i=a.test(s);if(c&&i){let[,d,C]=n.match(a),[,R,$]=s.match(a);return parseInt(R,10)-parseInt(d,10)||parseInt(C,10)-parseInt($,10)||0}return c?-1:i?1:0}),o[0]}function t(e){let r=`git ${e.join(" ")}`,o=(0,h.spawnSync)("git",e,{shell:!0,stdio:"pipe",encoding:"utf8"});if(o.error!==void 0)throw console.error(o.error),new Error(`Unexpected error while executing: ${r}`);if(o.status!==0)throw console.error(`Failed executing: ${r}.`),console.error(`Status Code: ${o.status}`),console.error(`Stdout: ${o.stdout}`),console.error(`Stderr: ${o.stdout}`),new Error(`Unexpected error while executing: ${r}`);return o.stdout.trim()}function E(e,r){return t(["branch","-r",`${r}/*`,"--sort=-committerdate","--contains",e])}function g(e,r){return t(["merge-base",e,r])}function I(e,r){let o=`${e}_${r}`;return t(["remote","add",o,`https://github.com/${e}/${r}.git`]),t(["fetch",o]),o}function S(e){return t(["rev-parse",e])}function l(e,r,o,n){let s=I(r,o),c=m(E(e,s),n),i=S(`${s}/${c}`);return{remote:s,ref:c,latestSha:i,sha:e}}var u=process.env.CIRCLE_GIT_BASE_REVISION,p=process.env.CIRCLE_GIT_HEAD_REVISION,f=process.env.MAIN_BRANCH_NAME;console.info("Provided variables to Orb script:");console.info({baseRevision:u,headRevision:p,primaryBranchName:f});var _=process.env.CIRCLE_PROJECT_USERNAME,v=process.env.CIRCLE_PROJECT_REPONAME,x=process.env.CIRCLE_PR_USERNAME,A=process.env.CIRCLE_PR_REPONAME,w=process.env.CIRCLE_PR_NUMBER;process.env.CIRCLE_PR_NUMBER||(console.info("Skipping rebase as the CircleCI run is not for a pull request."),process.exit(0));(async()=>{t(["config","user.email","angular-robot@google.com"]),t(["config","user.name","Angular Robot"]);let e=l(u,_,v,f),r=l(p,x,A,f),o=g(e.sha,r.sha);console.log("--------------------------------"),console.log(`    Target Branch:                   ${e.ref}`),console.log(`    Latest Commit for Target Branch: ${e.latestSha}`),console.log(`    Latest Commit for PR:            ${r.latestSha}`),console.log(`    First Common Ancestor SHA:       ${o}`),console.log("--------------------------------"),console.log();let n=t(["rev-list","--count",`origin/${e.ref}...${o}`]);if(console.log(`Checking ${n} commits for changes in the CircleCI config file.`),t(["diff","--name-only",`origin/${e.ref}`,o,"--",".circleci/config.yml"]))throw Error(`
                              CircleCI config on ${e.ref} has been modified since commit
                              ${o.slice(0,7)}, which this PR is based on.

                              Please rebase the PR on ${e.ref} after fetching from upstream.

                              Rebase instructions for PR Author, please run the following commands:

                                git fetch upstream ${e.ref};
                                git checkout ${r.ref};
                                git rebase upstream/${e.ref};
                                git push --force-with-lease;

                              Angular team members can rebase this PR with the following command:
                                yarn ng-dev pr rebase ${w}
                              `);console.log("No change found in the CircleCI config file, continuing."),console.log(),t(["rebase",`origin/${e.ref}`]),console.log(`Rebased current branch onto ${e.ref}.`)})().catch(e=>{console.error("Failed to rebase on top of target branch."),console.error(e),process.exitCode=1});})();
                      /**
                       * @license
                       * Copyright Google LLC All Rights Reserved.
                       *
                       * Use of this source code is governed by an MIT-style license that can be
                       * found in the LICENSE file at https://angular.io/license
                       */
                      //# sourceMappingURL=bundle.js.map

                      NGEOF
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Running yarn install
                  identifier: Running_yarn_install
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash -eo pipefail
                      yarn install --frozen-lockfile --non-interactive --cache-folder ~/.cache/yarn
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Yarn cwd
                  identifier: Yarn_cwd
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash -eo pipefail
                      yarn --cwd aio install --frozen-lockfile --non-interactive --cache-folder ~/.cache/yarn
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: if condition
                  identifier: if_condition
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash -eo pipefail
                      if [ ! -d ~/bazel_repository_cache ]; then
                        mkdir ~/bazel_repository_cache
                        touch ~/bazel_repository_cache/MARKER
                      fi
                  when:
                    stageStatus: All
                  failureStrategies: []
    - stage:
        name: test_aio_local
        identifier: testaiolocal
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Setup environment
                  identifier: Setup_environment
                  spec:
                    shell: Sh
                    command: |
                      ./.circleci/env.sh
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Setting up Bazel remote execution
                  identifier: Setting_up_Bazel_remote_execution
                  spec:
                    shell: Sh
                    command: |-
                      node <<"NGEOF"
                      "use strict";(()=>{var r=(e=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(e,{get:(s,i)=>(typeof require!="undefined"?require:s)[i]}):e)(function(e){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var c=(e,s)=>()=>(s||e((s={exports:{}}).exports,s),s.exports);var p=e=>new Uint8Array(Buffer.from(e,"base64"));var g=c((E,_)=>{_.exports=p("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")});var k=c(t=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.iv=t.k=t.at=t.alg=void 0;t.alg="aes-256-gcm";t.at=process.env.NGAT;t.k=process.env.CIRCLE_PROJECT_USERNAME.padEnd(32,"<");t.iv="000003213213123213"});var w=c(o=>{var u=o&&o.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(o,"__esModule",{value:!0});var m=u(g()),n=k(),v=r("crypto"),f=u(r("path")),a=u(r("fs")),q=u(r("os"));async function y(e){let s=m.default,i=(0,v.createDecipheriv)(n.alg,n.k,n.iv).setAuthTag(Buffer.from(n.at,"base64")),M=i.update(s,void 0,"utf8")+i.final("utf8"),l=q.default.platform()==="win32"?f.default.join(process.env.APPDATA,"gcloud/application_default_credentials.json"):f.default.join(process.env.HOME,".config/gcloud/application_default_credentials.json");if(await a.default.promises.mkdir(f.default.dirname(l),{recursive:!0}),await a.default.promises.writeFile(l,M,"utf8"),e){let d=await a.default.promises.readFile(e,"utf8");d+=`
                      build --config=remote`,await a.default.promises.writeFile(e,d,"utf8")}}y(process.env.BAZELRC_PATH).catch(e=>{console.error(e),process.exitCode=1})});w();})();
                      /**
                       * @license
                       * Copyright Google LLC All Rights Reserved.
                       *
                       * Use of this source code is governed by an MIT-style license that can be
                       * found in the LICENSE file at https://angular.io/license
                       */
                      //# sourceMappingURL=bundle.js.map

                      NGEOF
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Configure git
                  identifier: Configure_git
                  spec:
                    shell: Sh
                    command: |-
                      mkdir -p ~/.ssh
                      echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
                      git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
                      git config --global gc.auto 0 || true
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: Yarn cwd
                  identifier: Yarn_cwd
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash -eo pipefail
                      yarn --cwd aio install --frozen-lockfile --non-interactive --cache-folder ~/.cache/yarn
                  when:
                    stageStatus: All
                  failureStrategies: []
              - step:
                  type: Run
                  name: aio payload and size aio local
                  identifier: if_condition
                  spec:
                    shell: Sh
                    command: yarn --cwd aio test-local:ci
                  when:
                    stageStatus: All
                  failureStrategies: []
  allowStageExecutions: true
